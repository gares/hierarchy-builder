/*        Hierarchy Builder: algebraic hierarchies made easy
    This software is released under the terms of the MIT license              */

namespace hb {

pred declare-existing-instance i:argument, i:argument.
declare-existing-instance T0 F0 :- std.do! [
  argument->ty T0 T, % TODO: change this when supporting morphism hierarchies
  argument->term F0 F,
  hb.instance.declare-instance T F Clauses,
  std.forall Clauses (x\log.coq.env.accumulate current "hb.db" (clause _ _ x)),
].

pred declare-const-instance i:id, i:term, i:arity.
declare-const-instance Name BodySkel TyWPSkel :- std.do! [
  std.assert-ok! (coq.elaborate-arity-skeleton TyWPSkel _ TyWP) "Definition type illtyped",
  coq.arity->term TyWP Ty,
  std.assert-ok! (coq.elaborate-skeleton BodySkel Ty Body) "Definition illtyped",
  if (TyWP = arity SectionTy) (
     % Do not open a section when it is not necessary (no parameters)
     % A side effect of opening a section is loosing meta data associated
     % with instances, in particular builder tags are lost
     if-verbose (coq.say  "HB: skipping section opening"),
     SectionBody = Body
   ) (
    SectionName is "hb_instance_" ^ {term_to_string {new_int} },
    log.coq.env.begin-section SectionName,
    hb.instance.postulate-arity TyWP [] Body SectionBody SectionTy
  ),

  std.assert! (coq.safe-dest-app SectionTy (global FactoryAlias) Args) "The type of the instance is not a factory",
  factory-alias->gref FactoryAlias Factory,
  std.assert! (factory-nparams Factory NParams) "Not a factory synthesized by HB",
  hb.instance.hack-section-discharging SectionBody SectionBodyHack,
  hb.instance.optimize-body SectionBodyHack OptimizedBody,
  if (Name = "_") (RealName is "HB_unnamed_factory_" ^ {std.any->string {new_int} }) (RealName = Name),
  log.coq.env.add-const-noimplicits RealName OptimizedBody _ @transparent! C,
  TheFactory = (global (const C)),
  std.appendR {coq.mk-n-holes NParams} [TheType|_] Args,
  hb.instance.declare-instance TheType TheFactory Clauses,

  if (TyWP = arity _) true (
    if-verbose (coq.say "HB: closing instance section"),
    log.coq.env.end-section-name SectionName
  ),

  % we accumulate clauses here since the section ends
  std.forall Clauses (x\log.coq.env.accumulate current "hb.db" (clause _ _ x)),
].

% [declare-instances T CL MCSTL] given a type T and a list of class definition
% CL in topological order (from least dep to most) looks for classes
% for which all the dependencies (mixins) were postulated so far and skips the
% rest. For each fulfilled class it declares a local constant inhabiting the
% corresponding structure and declares it canonical.
% Each mixin used in order to fulfill a class is returned together with its name.
pred declare-instances i:term, i:list class, o:list constant.
declare-instances T [class Class Struct MLwP|Rest] [CS|L] :-
  params->holes MLwP Params,
  get-constructor Class KC,

  if (not(local-cs? T Struct))
     true % we build it
     (if-verbose (coq.say "HB: skipping alreay existing"
                    {nice-gref->string Struct} "instance on"
                    {coq.term->string T}),
      fail),

  if (mgref->term Params T KC KCApp)
     (if-verbose (coq.say "HB: we can build a" {nice-gref->string Struct} "on"
        {coq.term->string T}))
     fail,

  !,
  coq.term->gref T TGR,
  coq.gref->path TGR TPath,
  std.rev TPath [TMod|_],
  coq.gref->id TGR TID,
  Name is TMod ^ "_" ^ TID ^ "_canonical_" ^ {gref->modname Struct},

  if-verbose (coq.say "HB: declare canonical structure instance" Name),

  get-constructor Struct KS,
  coq.mk-app (global KS) {std.append Params [T, KCApp]} S,
  std.assert-ok! (coq.typecheck S STy) "declare-instances: S illtyped",

  log.coq.env.add-const-noimplicits Name S STy @transparent! CS, % Bug coq/coq#11155, could be a Let
  log.coq.CS.declare-instance (const CS), % Bug coq/coq#11155, should be local
  declare-instances T Rest L.
declare-instances T [_|Rest] L :- declare-instances T Rest L.
declare-instances _ [] [].

}

/* ------------------------------------------------------------------------- */
/* ----------------------------- private code ------------------------------ */
/* ------------------------------------------------------------------------- */

namespace hb.instance {

shorten coq.{ term->gref, subst-fun, safe-dest-app, mk-app, mk-eta, subst-prod }.

pred declare-instance i:term, i:term, o:list prop.
declare-instance T F Clauses :- current-mode (builder-from TheFactory FGR _), !,
  declare-canonical-instances-from-factory-and-local-builders T F TheFactory FGR Clauses.
declare-instance T F [] :-
  declare-canonical-instances-from-factory T F.

pred add-mixin i:term, i:factoryname, i:bool, i:mixinname, i:term, o:list prop.
add-mixin T FGR MakeCanon MissinMixin Bo [MixinSrcCl, BuiderDeclCl] :-
  MixinSrcCl = mixin-src T MixinName (global (const C)),
  BuiderDeclCl = builder-decl (builder N FGR MixinName (const C)),
  new_int N, % timestamp

  std.assert-ok! (coq.typecheck Bo Ty) "declare-instances: mixin illtyped",
  safe-dest-app Ty (global MixinNameAlias) _,
  factory-alias->gref MixinNameAlias MixinName,

  std.assert! (MissinMixin = MixinName) "HB: anomaly: we built the wrong mixin",

  % If the mixin instance is alreaduy a constant there is no need to
  % alias it.
  if (Bo = global (const C)) true
    (Name is {nice-gref->string FGR} ^"_to_" ^ {nice-gref->string MixinName} ^ "__" ^ {std.any->string {new_int}},
     if-verbose (coq.say "HB: declare" Name),
     log.coq.env.add-const-noimplicits Name Bo Ty @transparent! C),
  if (MakeCanon = tt, whd (global (const C)) [] (global (indc _)) _)
     (if-verbose (coq.say "HB: declare canonical mixin instance" C),
      log.coq.CS.declare-instance (const C))
     true.

pred add-all-mixins i:term, i:factoryname, i:list mixinname, i:bool, o:list prop.
add-all-mixins T FGR MissingMixins MakeCanon Clauses :- std.do! [
  std.map MissingMixins (assert!-mixin-for T) MBL,
  std.map2 MissingMixins MBL (add-mixin T FGR MakeCanon) ClausesL,
  std.flatten ClausesL Clauses,
].

% [postulate-arity A Acc T TS] postulates section variables
% corresponding to parameters in arity A. TS is T applied
% to all section variables (and hd-beta reduced). Acc should
% be [] at call site.
pred postulate-arity i:arity, i:list term, i:term, o:term, o:term.
postulate-arity (parameter ID _ S A) Acc T T1 Ty :-
  std.assert-ok! (coq.typecheck-ty S _) "arity parameter illtyped",
  if-verbose (coq.say "HB: postulating" ID),
  if (var S) (coq.fresh-type S) true,
  log.coq.env.add-section-variable-noimplicits ID S C,
  Var = global (const C),
  postulate-arity (A Var) [Var|Acc] T T1 Ty.
postulate-arity (arity Ty) ArgsRev X T Ty :-
  hd-beta X {std.rev ArgsRev} X1 Stack1,
  unwind X1 Stack1 T.

pred findall-mixin-src i:term, o:list mixinname.
findall-mixin-src T ML :-
  std.map {std.findall (mixin-src T M_ V_)} mixin-src_mixin ML.

% We find the new mixins that F build, we build them and shedule them
% for becoming builders at section closing time. We also declare
% all canonical instances these new mixins allow for, so that the user
% can access their theory and notations
pred declare-canonical-instances-from-factory-and-local-builders i:term, i:term, i:term, i:factoryname, o:list prop.
declare-canonical-instances-from-factory-and-local-builders T F _TheFactory FGR Clauses :- std.do! [
  findall-mixin-src T OldMixins,
  mixin-srcs T F MixinSrcFromF,
  std.map MixinSrcFromF mixin-src_mixin FMixins,
  std.filter FMixins (m\ not(std.mem! OldMixins m)) MissingMixins,
  if-verbose (coq.say "HB: new mixins from"
    {coq.term->string F} "on" {coq.term->string T} ":"
    {std.map MissingMixins nice-gref->string}),
  MixinSrcFromF => add-all-mixins T FGR MissingMixins ff Clauses,
  Clauses => hb.declare-instances T {findall-classes} _
].

% [declare-canonical-instances-from-factory T F] given a factory F
% it uses all known builders to declare canonical instances of structures
% on T
pred declare-canonical-instances-from-factory i:term, i:term.
declare-canonical-instances-from-factory T F :-
  coq.typecheck F TyF ok,
  coq.prod-tgt->gref TyF GRF,
  % The order of the following two "under...do!"  is crucial,
  % priority must be given to canonical mixins
  % as they are the ones which guarantee forgetful inheritance
  % hence we add these clauses last.
  under-mixin-src-from-factory.do! T F [
    under-canonical-mixins-of.do! T [
      add-all-mixins T GRF {list-w-params_list {factory-provides GRF}} tt _,
      hb.declare-instances T {findall-classes} _
    ]
  ].

% If you don't mention the factory in a builder, then Coq won't make
% a lambda for it at section closing time.
pred hack-section-discharging i:term, o:term.
hack-section-discharging B B1 :- current-mode (builder-from TheFactory _ _), !,
  std.assert-ok! (coq.typecheck TheFactory TheFactoryTy) "TheFactory is illtyped (BUG)",
  B1 = {{ let _ : lp:TheFactoryTy := lp:TheFactory in lp:B }}.
hack-section-discharging B B.

pred optimize-body i:term, o:term.
optimize-body (app[global (const C)| Args]) Red :- phant-abbrev _ (const C) _, !,
  coq.env.const C (some B) _,
  hd-beta B Args HD Stack,
  unwind HD Stack Red.
optimize-body X X.

}
